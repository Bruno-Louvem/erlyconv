%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MICSFT/PC/CP864.TXT AT 2016-08-19
-module(cp864).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#25) -> 16#066a;
to_unicode(16#80) -> 16#00b0;
to_unicode(16#81) -> 16#00b7;
to_unicode(16#82) -> 16#2219;
to_unicode(16#83) -> 16#221a;
to_unicode(16#84) -> 16#2592;
to_unicode(16#85) -> 16#2500;
to_unicode(16#86) -> 16#2502;
to_unicode(16#87) -> 16#253c;
to_unicode(16#88) -> 16#2524;
to_unicode(16#89) -> 16#252c;
to_unicode(16#8a) -> 16#251c;
to_unicode(16#8b) -> 16#2534;
to_unicode(16#8c) -> 16#2510;
to_unicode(16#8d) -> 16#250c;
to_unicode(16#8e) -> 16#2514;
to_unicode(16#8f) -> 16#2518;
to_unicode(16#90) -> 16#03b2;
to_unicode(16#91) -> 16#221e;
to_unicode(16#92) -> 16#03c6;
to_unicode(16#93) -> 16#00b1;
to_unicode(16#94) -> 16#00bd;
to_unicode(16#95) -> 16#00bc;
to_unicode(16#96) -> 16#2248;
to_unicode(16#97) -> 16#00ab;
to_unicode(16#98) -> 16#00bb;
to_unicode(16#99) -> 16#fef7;
to_unicode(16#9a) -> 16#fef8;
to_unicode(16#9d) -> 16#fefb;
to_unicode(16#9e) -> 16#fefc;
to_unicode(16#a1) -> 16#00ad;
to_unicode(16#a2) -> 16#fe82;
to_unicode(16#a5) -> 16#fe84;
to_unicode(16#a8) -> 16#fe8e;
to_unicode(16#a9) -> 16#fe8f;
to_unicode(16#aa) -> 16#fe95;
to_unicode(16#ab) -> 16#fe99;
to_unicode(16#ac) -> 16#060c;
to_unicode(16#ad) -> 16#fe9d;
to_unicode(16#ae) -> 16#fea1;
to_unicode(16#af) -> 16#fea5;
to_unicode(16#b0) -> 16#0660;
to_unicode(16#b1) -> 16#0661;
to_unicode(16#b2) -> 16#0662;
to_unicode(16#b3) -> 16#0663;
to_unicode(16#b4) -> 16#0664;
to_unicode(16#b5) -> 16#0665;
to_unicode(16#b6) -> 16#0666;
to_unicode(16#b7) -> 16#0667;
to_unicode(16#b8) -> 16#0668;
to_unicode(16#b9) -> 16#0669;
to_unicode(16#ba) -> 16#fed1;
to_unicode(16#bb) -> 16#061b;
to_unicode(16#bc) -> 16#feb1;
to_unicode(16#bd) -> 16#feb5;
to_unicode(16#be) -> 16#feb9;
to_unicode(16#bf) -> 16#061f;
to_unicode(16#c0) -> 16#00a2;
to_unicode(16#c1) -> 16#fe80;
to_unicode(16#c2) -> 16#fe81;
to_unicode(16#c3) -> 16#fe83;
to_unicode(16#c4) -> 16#fe85;
to_unicode(16#c5) -> 16#feca;
to_unicode(16#c6) -> 16#fe8b;
to_unicode(16#c7) -> 16#fe8d;
to_unicode(16#c8) -> 16#fe91;
to_unicode(16#c9) -> 16#fe93;
to_unicode(16#ca) -> 16#fe97;
to_unicode(16#cb) -> 16#fe9b;
to_unicode(16#cc) -> 16#fe9f;
to_unicode(16#cd) -> 16#fea3;
to_unicode(16#ce) -> 16#fea7;
to_unicode(16#cf) -> 16#fea9;
to_unicode(16#d0) -> 16#feab;
to_unicode(16#d1) -> 16#fead;
to_unicode(16#d2) -> 16#feaf;
to_unicode(16#d3) -> 16#feb3;
to_unicode(16#d4) -> 16#feb7;
to_unicode(16#d5) -> 16#febb;
to_unicode(16#d6) -> 16#febf;
to_unicode(16#d7) -> 16#fec1;
to_unicode(16#d8) -> 16#fec5;
to_unicode(16#d9) -> 16#fecb;
to_unicode(16#da) -> 16#fecf;
to_unicode(16#db) -> 16#00a6;
to_unicode(16#dc) -> 16#00ac;
to_unicode(16#dd) -> 16#00f7;
to_unicode(16#de) -> 16#00d7;
to_unicode(16#df) -> 16#fec9;
to_unicode(16#e0) -> 16#0640;
to_unicode(16#e1) -> 16#fed3;
to_unicode(16#e2) -> 16#fed7;
to_unicode(16#e3) -> 16#fedb;
to_unicode(16#e4) -> 16#fedf;
to_unicode(16#e5) -> 16#fee3;
to_unicode(16#e6) -> 16#fee7;
to_unicode(16#e7) -> 16#feeb;
to_unicode(16#e8) -> 16#feed;
to_unicode(16#e9) -> 16#feef;
to_unicode(16#ea) -> 16#fef3;
to_unicode(16#eb) -> 16#febd;
to_unicode(16#ec) -> 16#fecc;
to_unicode(16#ed) -> 16#fece;
to_unicode(16#ee) -> 16#fecd;
to_unicode(16#ef) -> 16#fee1;
to_unicode(16#f0) -> 16#fe7d;
to_unicode(16#f1) -> 16#0651;
to_unicode(16#f2) -> 16#fee5;
to_unicode(16#f3) -> 16#fee9;
to_unicode(16#f4) -> 16#feec;
to_unicode(16#f5) -> 16#fef0;
to_unicode(16#f6) -> 16#fef2;
to_unicode(16#f7) -> 16#fed0;
to_unicode(16#f8) -> 16#fed5;
to_unicode(16#f9) -> 16#fef5;
to_unicode(16#fa) -> 16#fef6;
to_unicode(16#fb) -> 16#fedd;
to_unicode(16#fc) -> 16#fed9;
to_unicode(16#fd) -> 16#fef1;
to_unicode(16#fe) -> 16#25a0;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#066a) -> 16#25;
from_unicode(16#00b0) -> 16#80;
from_unicode(16#00b7) -> 16#81;
from_unicode(16#2219) -> 16#82;
from_unicode(16#221a) -> 16#83;
from_unicode(16#2592) -> 16#84;
from_unicode(16#2500) -> 16#85;
from_unicode(16#2502) -> 16#86;
from_unicode(16#253c) -> 16#87;
from_unicode(16#2524) -> 16#88;
from_unicode(16#252c) -> 16#89;
from_unicode(16#251c) -> 16#8a;
from_unicode(16#2534) -> 16#8b;
from_unicode(16#2510) -> 16#8c;
from_unicode(16#250c) -> 16#8d;
from_unicode(16#2514) -> 16#8e;
from_unicode(16#2518) -> 16#8f;
from_unicode(16#03b2) -> 16#90;
from_unicode(16#221e) -> 16#91;
from_unicode(16#03c6) -> 16#92;
from_unicode(16#00b1) -> 16#93;
from_unicode(16#00bd) -> 16#94;
from_unicode(16#00bc) -> 16#95;
from_unicode(16#2248) -> 16#96;
from_unicode(16#00ab) -> 16#97;
from_unicode(16#00bb) -> 16#98;
from_unicode(16#fef7) -> 16#99;
from_unicode(16#fef8) -> 16#9a;
from_unicode(16#fefb) -> 16#9d;
from_unicode(16#fefc) -> 16#9e;
from_unicode(16#00ad) -> 16#a1;
from_unicode(16#fe82) -> 16#a2;
from_unicode(16#fe84) -> 16#a5;
from_unicode(16#fe8e) -> 16#a8;
from_unicode(16#fe8f) -> 16#a9;
from_unicode(16#fe95) -> 16#aa;
from_unicode(16#fe99) -> 16#ab;
from_unicode(16#060c) -> 16#ac;
from_unicode(16#fe9d) -> 16#ad;
from_unicode(16#fea1) -> 16#ae;
from_unicode(16#fea5) -> 16#af;
from_unicode(16#0660) -> 16#b0;
from_unicode(16#0661) -> 16#b1;
from_unicode(16#0662) -> 16#b2;
from_unicode(16#0663) -> 16#b3;
from_unicode(16#0664) -> 16#b4;
from_unicode(16#0665) -> 16#b5;
from_unicode(16#0666) -> 16#b6;
from_unicode(16#0667) -> 16#b7;
from_unicode(16#0668) -> 16#b8;
from_unicode(16#0669) -> 16#b9;
from_unicode(16#fed1) -> 16#ba;
from_unicode(16#061b) -> 16#bb;
from_unicode(16#feb1) -> 16#bc;
from_unicode(16#feb5) -> 16#bd;
from_unicode(16#feb9) -> 16#be;
from_unicode(16#061f) -> 16#bf;
from_unicode(16#00a2) -> 16#c0;
from_unicode(16#fe80) -> 16#c1;
from_unicode(16#fe81) -> 16#c2;
from_unicode(16#fe83) -> 16#c3;
from_unicode(16#fe85) -> 16#c4;
from_unicode(16#feca) -> 16#c5;
from_unicode(16#fe8b) -> 16#c6;
from_unicode(16#fe8d) -> 16#c7;
from_unicode(16#fe91) -> 16#c8;
from_unicode(16#fe93) -> 16#c9;
from_unicode(16#fe97) -> 16#ca;
from_unicode(16#fe9b) -> 16#cb;
from_unicode(16#fe9f) -> 16#cc;
from_unicode(16#fea3) -> 16#cd;
from_unicode(16#fea7) -> 16#ce;
from_unicode(16#fea9) -> 16#cf;
from_unicode(16#feab) -> 16#d0;
from_unicode(16#fead) -> 16#d1;
from_unicode(16#feaf) -> 16#d2;
from_unicode(16#feb3) -> 16#d3;
from_unicode(16#feb7) -> 16#d4;
from_unicode(16#febb) -> 16#d5;
from_unicode(16#febf) -> 16#d6;
from_unicode(16#fec1) -> 16#d7;
from_unicode(16#fec5) -> 16#d8;
from_unicode(16#fecb) -> 16#d9;
from_unicode(16#fecf) -> 16#da;
from_unicode(16#00a6) -> 16#db;
from_unicode(16#00ac) -> 16#dc;
from_unicode(16#00f7) -> 16#dd;
from_unicode(16#00d7) -> 16#de;
from_unicode(16#fec9) -> 16#df;
from_unicode(16#0640) -> 16#e0;
from_unicode(16#fed3) -> 16#e1;
from_unicode(16#fed7) -> 16#e2;
from_unicode(16#fedb) -> 16#e3;
from_unicode(16#fedf) -> 16#e4;
from_unicode(16#fee3) -> 16#e5;
from_unicode(16#fee7) -> 16#e6;
from_unicode(16#feeb) -> 16#e7;
from_unicode(16#feed) -> 16#e8;
from_unicode(16#feef) -> 16#e9;
from_unicode(16#fef3) -> 16#ea;
from_unicode(16#febd) -> 16#eb;
from_unicode(16#fecc) -> 16#ec;
from_unicode(16#fece) -> 16#ed;
from_unicode(16#fecd) -> 16#ee;
from_unicode(16#fee1) -> 16#ef;
from_unicode(16#fe7d) -> 16#f0;
from_unicode(16#0651) -> 16#f1;
from_unicode(16#fee5) -> 16#f2;
from_unicode(16#fee9) -> 16#f3;
from_unicode(16#feec) -> 16#f4;
from_unicode(16#fef0) -> 16#f5;
from_unicode(16#fef2) -> 16#f6;
from_unicode(16#fed0) -> 16#f7;
from_unicode(16#fed5) -> 16#f8;
from_unicode(16#fef5) -> 16#f9;
from_unicode(16#fef6) -> 16#fa;
from_unicode(16#fedd) -> 16#fb;
from_unicode(16#fed9) -> 16#fc;
from_unicode(16#fef1) -> 16#fd;
from_unicode(16#25a0) -> 16#fe;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
