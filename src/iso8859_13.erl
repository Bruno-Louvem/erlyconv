%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-13.TXT AT 2016-08-19
-module(iso8859_13).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#A1) -> 16#201D;
to_unicode(16#A5) -> 16#201E;
to_unicode(16#A8) -> 16#00D8;
to_unicode(16#AA) -> 16#0156;
to_unicode(16#AF) -> 16#00C6;
to_unicode(16#B4) -> 16#201C;
to_unicode(16#B8) -> 16#00F8;
to_unicode(16#BA) -> 16#0157;
to_unicode(16#BF) -> 16#00E6;
to_unicode(16#C0) -> 16#0104;
to_unicode(16#C1) -> 16#012E;
to_unicode(16#C2) -> 16#0100;
to_unicode(16#C3) -> 16#0106;
to_unicode(16#C6) -> 16#0118;
to_unicode(16#C7) -> 16#0112;
to_unicode(16#C8) -> 16#010C;
to_unicode(16#CA) -> 16#0179;
to_unicode(16#CB) -> 16#0116;
to_unicode(16#CC) -> 16#0122;
to_unicode(16#CD) -> 16#0136;
to_unicode(16#CE) -> 16#012A;
to_unicode(16#CF) -> 16#013B;
to_unicode(16#D0) -> 16#0160;
to_unicode(16#D1) -> 16#0143;
to_unicode(16#D2) -> 16#0145;
to_unicode(16#D4) -> 16#014C;
to_unicode(16#D8) -> 16#0172;
to_unicode(16#D9) -> 16#0141;
to_unicode(16#DA) -> 16#015A;
to_unicode(16#DB) -> 16#016A;
to_unicode(16#DD) -> 16#017B;
to_unicode(16#DE) -> 16#017D;
to_unicode(16#E0) -> 16#0105;
to_unicode(16#E1) -> 16#012F;
to_unicode(16#E2) -> 16#0101;
to_unicode(16#E3) -> 16#0107;
to_unicode(16#E6) -> 16#0119;
to_unicode(16#E7) -> 16#0113;
to_unicode(16#E8) -> 16#010D;
to_unicode(16#EA) -> 16#017A;
to_unicode(16#EB) -> 16#0117;
to_unicode(16#EC) -> 16#0123;
to_unicode(16#ED) -> 16#0137;
to_unicode(16#EE) -> 16#012B;
to_unicode(16#EF) -> 16#013C;
to_unicode(16#F0) -> 16#0161;
to_unicode(16#F1) -> 16#0144;
to_unicode(16#F2) -> 16#0146;
to_unicode(16#F4) -> 16#014D;
to_unicode(16#F8) -> 16#0173;
to_unicode(16#F9) -> 16#0142;
to_unicode(16#FA) -> 16#015B;
to_unicode(16#FB) -> 16#016B;
to_unicode(16#FD) -> 16#017C;
to_unicode(16#FE) -> 16#017E;
to_unicode(16#FF) -> 16#2019;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#201D) -> 16#A1;
from_unicode(16#201E) -> 16#A5;
from_unicode(16#00D8) -> 16#A8;
from_unicode(16#0156) -> 16#AA;
from_unicode(16#00C6) -> 16#AF;
from_unicode(16#201C) -> 16#B4;
from_unicode(16#00F8) -> 16#B8;
from_unicode(16#0157) -> 16#BA;
from_unicode(16#00E6) -> 16#BF;
from_unicode(16#0104) -> 16#C0;
from_unicode(16#012E) -> 16#C1;
from_unicode(16#0100) -> 16#C2;
from_unicode(16#0106) -> 16#C3;
from_unicode(16#0118) -> 16#C6;
from_unicode(16#0112) -> 16#C7;
from_unicode(16#010C) -> 16#C8;
from_unicode(16#0179) -> 16#CA;
from_unicode(16#0116) -> 16#CB;
from_unicode(16#0122) -> 16#CC;
from_unicode(16#0136) -> 16#CD;
from_unicode(16#012A) -> 16#CE;
from_unicode(16#013B) -> 16#CF;
from_unicode(16#0160) -> 16#D0;
from_unicode(16#0143) -> 16#D1;
from_unicode(16#0145) -> 16#D2;
from_unicode(16#014C) -> 16#D4;
from_unicode(16#0172) -> 16#D8;
from_unicode(16#0141) -> 16#D9;
from_unicode(16#015A) -> 16#DA;
from_unicode(16#016A) -> 16#DB;
from_unicode(16#017B) -> 16#DD;
from_unicode(16#017D) -> 16#DE;
from_unicode(16#0105) -> 16#E0;
from_unicode(16#012F) -> 16#E1;
from_unicode(16#0101) -> 16#E2;
from_unicode(16#0107) -> 16#E3;
from_unicode(16#0119) -> 16#E6;
from_unicode(16#0113) -> 16#E7;
from_unicode(16#010D) -> 16#E8;
from_unicode(16#017A) -> 16#EA;
from_unicode(16#0117) -> 16#EB;
from_unicode(16#0123) -> 16#EC;
from_unicode(16#0137) -> 16#ED;
from_unicode(16#012B) -> 16#EE;
from_unicode(16#013C) -> 16#EF;
from_unicode(16#0161) -> 16#F0;
from_unicode(16#0144) -> 16#F1;
from_unicode(16#0146) -> 16#F2;
from_unicode(16#014D) -> 16#F4;
from_unicode(16#0173) -> 16#F8;
from_unicode(16#0142) -> 16#F9;
from_unicode(16#015B) -> 16#FA;
from_unicode(16#016B) -> 16#FB;
from_unicode(16#017C) -> 16#FD;
from_unicode(16#017E) -> 16#FE;
from_unicode(16#2019) -> 16#FF;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
