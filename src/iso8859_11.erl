%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-11.TXT AT 2016-08-19
-module(iso8859_11).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#A1) -> 16#0E01;
to_unicode(16#A2) -> 16#0E02;
to_unicode(16#A3) -> 16#0E03;
to_unicode(16#A4) -> 16#0E04;
to_unicode(16#A5) -> 16#0E05;
to_unicode(16#A6) -> 16#0E06;
to_unicode(16#A7) -> 16#0E07;
to_unicode(16#A8) -> 16#0E08;
to_unicode(16#A9) -> 16#0E09;
to_unicode(16#AA) -> 16#0E0A;
to_unicode(16#AB) -> 16#0E0B;
to_unicode(16#AC) -> 16#0E0C;
to_unicode(16#AD) -> 16#0E0D;
to_unicode(16#AE) -> 16#0E0E;
to_unicode(16#AF) -> 16#0E0F;
to_unicode(16#B0) -> 16#0E10;
to_unicode(16#B1) -> 16#0E11;
to_unicode(16#B2) -> 16#0E12;
to_unicode(16#B3) -> 16#0E13;
to_unicode(16#B4) -> 16#0E14;
to_unicode(16#B5) -> 16#0E15;
to_unicode(16#B6) -> 16#0E16;
to_unicode(16#B7) -> 16#0E17;
to_unicode(16#B8) -> 16#0E18;
to_unicode(16#B9) -> 16#0E19;
to_unicode(16#BA) -> 16#0E1A;
to_unicode(16#BB) -> 16#0E1B;
to_unicode(16#BC) -> 16#0E1C;
to_unicode(16#BD) -> 16#0E1D;
to_unicode(16#BE) -> 16#0E1E;
to_unicode(16#BF) -> 16#0E1F;
to_unicode(16#C0) -> 16#0E20;
to_unicode(16#C1) -> 16#0E21;
to_unicode(16#C2) -> 16#0E22;
to_unicode(16#C3) -> 16#0E23;
to_unicode(16#C4) -> 16#0E24;
to_unicode(16#C5) -> 16#0E25;
to_unicode(16#C6) -> 16#0E26;
to_unicode(16#C7) -> 16#0E27;
to_unicode(16#C8) -> 16#0E28;
to_unicode(16#C9) -> 16#0E29;
to_unicode(16#CA) -> 16#0E2A;
to_unicode(16#CB) -> 16#0E2B;
to_unicode(16#CC) -> 16#0E2C;
to_unicode(16#CD) -> 16#0E2D;
to_unicode(16#CE) -> 16#0E2E;
to_unicode(16#CF) -> 16#0E2F;
to_unicode(16#D0) -> 16#0E30;
to_unicode(16#D1) -> 16#0E31;
to_unicode(16#D2) -> 16#0E32;
to_unicode(16#D3) -> 16#0E33;
to_unicode(16#D4) -> 16#0E34;
to_unicode(16#D5) -> 16#0E35;
to_unicode(16#D6) -> 16#0E36;
to_unicode(16#D7) -> 16#0E37;
to_unicode(16#D8) -> 16#0E38;
to_unicode(16#D9) -> 16#0E39;
to_unicode(16#DA) -> 16#0E3A;
to_unicode(16#DF) -> 16#0E3F;
to_unicode(16#E0) -> 16#0E40;
to_unicode(16#E1) -> 16#0E41;
to_unicode(16#E2) -> 16#0E42;
to_unicode(16#E3) -> 16#0E43;
to_unicode(16#E4) -> 16#0E44;
to_unicode(16#E5) -> 16#0E45;
to_unicode(16#E6) -> 16#0E46;
to_unicode(16#E7) -> 16#0E47;
to_unicode(16#E8) -> 16#0E48;
to_unicode(16#E9) -> 16#0E49;
to_unicode(16#EA) -> 16#0E4A;
to_unicode(16#EB) -> 16#0E4B;
to_unicode(16#EC) -> 16#0E4C;
to_unicode(16#ED) -> 16#0E4D;
to_unicode(16#EE) -> 16#0E4E;
to_unicode(16#EF) -> 16#0E4F;
to_unicode(16#F0) -> 16#0E50;
to_unicode(16#F1) -> 16#0E51;
to_unicode(16#F2) -> 16#0E52;
to_unicode(16#F3) -> 16#0E53;
to_unicode(16#F4) -> 16#0E54;
to_unicode(16#F5) -> 16#0E55;
to_unicode(16#F6) -> 16#0E56;
to_unicode(16#F7) -> 16#0E57;
to_unicode(16#F8) -> 16#0E58;
to_unicode(16#F9) -> 16#0E59;
to_unicode(16#FA) -> 16#0E5A;
to_unicode(16#FB) -> 16#0E5B;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#0E01) -> 16#A1;
from_unicode(16#0E02) -> 16#A2;
from_unicode(16#0E03) -> 16#A3;
from_unicode(16#0E04) -> 16#A4;
from_unicode(16#0E05) -> 16#A5;
from_unicode(16#0E06) -> 16#A6;
from_unicode(16#0E07) -> 16#A7;
from_unicode(16#0E08) -> 16#A8;
from_unicode(16#0E09) -> 16#A9;
from_unicode(16#0E0A) -> 16#AA;
from_unicode(16#0E0B) -> 16#AB;
from_unicode(16#0E0C) -> 16#AC;
from_unicode(16#0E0D) -> 16#AD;
from_unicode(16#0E0E) -> 16#AE;
from_unicode(16#0E0F) -> 16#AF;
from_unicode(16#0E10) -> 16#B0;
from_unicode(16#0E11) -> 16#B1;
from_unicode(16#0E12) -> 16#B2;
from_unicode(16#0E13) -> 16#B3;
from_unicode(16#0E14) -> 16#B4;
from_unicode(16#0E15) -> 16#B5;
from_unicode(16#0E16) -> 16#B6;
from_unicode(16#0E17) -> 16#B7;
from_unicode(16#0E18) -> 16#B8;
from_unicode(16#0E19) -> 16#B9;
from_unicode(16#0E1A) -> 16#BA;
from_unicode(16#0E1B) -> 16#BB;
from_unicode(16#0E1C) -> 16#BC;
from_unicode(16#0E1D) -> 16#BD;
from_unicode(16#0E1E) -> 16#BE;
from_unicode(16#0E1F) -> 16#BF;
from_unicode(16#0E20) -> 16#C0;
from_unicode(16#0E21) -> 16#C1;
from_unicode(16#0E22) -> 16#C2;
from_unicode(16#0E23) -> 16#C3;
from_unicode(16#0E24) -> 16#C4;
from_unicode(16#0E25) -> 16#C5;
from_unicode(16#0E26) -> 16#C6;
from_unicode(16#0E27) -> 16#C7;
from_unicode(16#0E28) -> 16#C8;
from_unicode(16#0E29) -> 16#C9;
from_unicode(16#0E2A) -> 16#CA;
from_unicode(16#0E2B) -> 16#CB;
from_unicode(16#0E2C) -> 16#CC;
from_unicode(16#0E2D) -> 16#CD;
from_unicode(16#0E2E) -> 16#CE;
from_unicode(16#0E2F) -> 16#CF;
from_unicode(16#0E30) -> 16#D0;
from_unicode(16#0E31) -> 16#D1;
from_unicode(16#0E32) -> 16#D2;
from_unicode(16#0E33) -> 16#D3;
from_unicode(16#0E34) -> 16#D4;
from_unicode(16#0E35) -> 16#D5;
from_unicode(16#0E36) -> 16#D6;
from_unicode(16#0E37) -> 16#D7;
from_unicode(16#0E38) -> 16#D8;
from_unicode(16#0E39) -> 16#D9;
from_unicode(16#0E3A) -> 16#DA;
from_unicode(16#0E3F) -> 16#DF;
from_unicode(16#0E40) -> 16#E0;
from_unicode(16#0E41) -> 16#E1;
from_unicode(16#0E42) -> 16#E2;
from_unicode(16#0E43) -> 16#E3;
from_unicode(16#0E44) -> 16#E4;
from_unicode(16#0E45) -> 16#E5;
from_unicode(16#0E46) -> 16#E6;
from_unicode(16#0E47) -> 16#E7;
from_unicode(16#0E48) -> 16#E8;
from_unicode(16#0E49) -> 16#E9;
from_unicode(16#0E4A) -> 16#EA;
from_unicode(16#0E4B) -> 16#EB;
from_unicode(16#0E4C) -> 16#EC;
from_unicode(16#0E4D) -> 16#ED;
from_unicode(16#0E4E) -> 16#EE;
from_unicode(16#0E4F) -> 16#EF;
from_unicode(16#0E50) -> 16#F0;
from_unicode(16#0E51) -> 16#F1;
from_unicode(16#0E52) -> 16#F2;
from_unicode(16#0E53) -> 16#F3;
from_unicode(16#0E54) -> 16#F4;
from_unicode(16#0E55) -> 16#F5;
from_unicode(16#0E56) -> 16#F6;
from_unicode(16#0E57) -> 16#F7;
from_unicode(16#0E58) -> 16#F8;
from_unicode(16#0E59) -> 16#F9;
from_unicode(16#0E5A) -> 16#FA;
from_unicode(16#0E5B) -> 16#FB;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
