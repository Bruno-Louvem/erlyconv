%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MICSFT/WINDOWS/CP1255.TXT AT 2016-08-19
-module(cp1255).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#20AC;
to_unicode(16#82) -> 16#201A;
to_unicode(16#83) -> 16#0192;
to_unicode(16#84) -> 16#201E;
to_unicode(16#85) -> 16#2026;
to_unicode(16#86) -> 16#2020;
to_unicode(16#87) -> 16#2021;
to_unicode(16#88) -> 16#02C6;
to_unicode(16#89) -> 16#2030;
to_unicode(16#8B) -> 16#2039;
to_unicode(16#91) -> 16#2018;
to_unicode(16#92) -> 16#2019;
to_unicode(16#93) -> 16#201C;
to_unicode(16#94) -> 16#201D;
to_unicode(16#95) -> 16#2022;
to_unicode(16#96) -> 16#2013;
to_unicode(16#97) -> 16#2014;
to_unicode(16#98) -> 16#02DC;
to_unicode(16#99) -> 16#2122;
to_unicode(16#9B) -> 16#203A;
to_unicode(16#A4) -> 16#20AA;
to_unicode(16#AA) -> 16#00D7;
to_unicode(16#BA) -> 16#00F7;
to_unicode(16#C0) -> 16#05B0;
to_unicode(16#C1) -> 16#05B1;
to_unicode(16#C2) -> 16#05B2;
to_unicode(16#C3) -> 16#05B3;
to_unicode(16#C4) -> 16#05B4;
to_unicode(16#C5) -> 16#05B5;
to_unicode(16#C6) -> 16#05B6;
to_unicode(16#C7) -> 16#05B7;
to_unicode(16#C8) -> 16#05B8;
to_unicode(16#C9) -> 16#05B9;
to_unicode(16#CB) -> 16#05BB;
to_unicode(16#CC) -> 16#05BC;
to_unicode(16#CD) -> 16#05BD;
to_unicode(16#CE) -> 16#05BE;
to_unicode(16#CF) -> 16#05BF;
to_unicode(16#D0) -> 16#05C0;
to_unicode(16#D1) -> 16#05C1;
to_unicode(16#D2) -> 16#05C2;
to_unicode(16#D3) -> 16#05C3;
to_unicode(16#D4) -> 16#05F0;
to_unicode(16#D5) -> 16#05F1;
to_unicode(16#D6) -> 16#05F2;
to_unicode(16#D7) -> 16#05F3;
to_unicode(16#D8) -> 16#05F4;
to_unicode(16#E0) -> 16#05D0;
to_unicode(16#E1) -> 16#05D1;
to_unicode(16#E2) -> 16#05D2;
to_unicode(16#E3) -> 16#05D3;
to_unicode(16#E4) -> 16#05D4;
to_unicode(16#E5) -> 16#05D5;
to_unicode(16#E6) -> 16#05D6;
to_unicode(16#E7) -> 16#05D7;
to_unicode(16#E8) -> 16#05D8;
to_unicode(16#E9) -> 16#05D9;
to_unicode(16#EA) -> 16#05DA;
to_unicode(16#EB) -> 16#05DB;
to_unicode(16#EC) -> 16#05DC;
to_unicode(16#ED) -> 16#05DD;
to_unicode(16#EE) -> 16#05DE;
to_unicode(16#EF) -> 16#05DF;
to_unicode(16#F0) -> 16#05E0;
to_unicode(16#F1) -> 16#05E1;
to_unicode(16#F2) -> 16#05E2;
to_unicode(16#F3) -> 16#05E3;
to_unicode(16#F4) -> 16#05E4;
to_unicode(16#F5) -> 16#05E5;
to_unicode(16#F6) -> 16#05E6;
to_unicode(16#F7) -> 16#05E7;
to_unicode(16#F8) -> 16#05E8;
to_unicode(16#F9) -> 16#05E9;
to_unicode(16#FA) -> 16#05EA;
to_unicode(16#FD) -> 16#200E;
to_unicode(16#FE) -> 16#200F;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#20AC) -> 16#80;
from_unicode(16#201A) -> 16#82;
from_unicode(16#0192) -> 16#83;
from_unicode(16#201E) -> 16#84;
from_unicode(16#2026) -> 16#85;
from_unicode(16#2020) -> 16#86;
from_unicode(16#2021) -> 16#87;
from_unicode(16#02C6) -> 16#88;
from_unicode(16#2030) -> 16#89;
from_unicode(16#2039) -> 16#8B;
from_unicode(16#2018) -> 16#91;
from_unicode(16#2019) -> 16#92;
from_unicode(16#201C) -> 16#93;
from_unicode(16#201D) -> 16#94;
from_unicode(16#2022) -> 16#95;
from_unicode(16#2013) -> 16#96;
from_unicode(16#2014) -> 16#97;
from_unicode(16#02DC) -> 16#98;
from_unicode(16#2122) -> 16#99;
from_unicode(16#203A) -> 16#9B;
from_unicode(16#20AA) -> 16#A4;
from_unicode(16#00D7) -> 16#AA;
from_unicode(16#00F7) -> 16#BA;
from_unicode(16#05B0) -> 16#C0;
from_unicode(16#05B1) -> 16#C1;
from_unicode(16#05B2) -> 16#C2;
from_unicode(16#05B3) -> 16#C3;
from_unicode(16#05B4) -> 16#C4;
from_unicode(16#05B5) -> 16#C5;
from_unicode(16#05B6) -> 16#C6;
from_unicode(16#05B7) -> 16#C7;
from_unicode(16#05B8) -> 16#C8;
from_unicode(16#05B9) -> 16#C9;
from_unicode(16#05BB) -> 16#CB;
from_unicode(16#05BC) -> 16#CC;
from_unicode(16#05BD) -> 16#CD;
from_unicode(16#05BE) -> 16#CE;
from_unicode(16#05BF) -> 16#CF;
from_unicode(16#05C0) -> 16#D0;
from_unicode(16#05C1) -> 16#D1;
from_unicode(16#05C2) -> 16#D2;
from_unicode(16#05C3) -> 16#D3;
from_unicode(16#05F0) -> 16#D4;
from_unicode(16#05F1) -> 16#D5;
from_unicode(16#05F2) -> 16#D6;
from_unicode(16#05F3) -> 16#D7;
from_unicode(16#05F4) -> 16#D8;
from_unicode(16#05D0) -> 16#E0;
from_unicode(16#05D1) -> 16#E1;
from_unicode(16#05D2) -> 16#E2;
from_unicode(16#05D3) -> 16#E3;
from_unicode(16#05D4) -> 16#E4;
from_unicode(16#05D5) -> 16#E5;
from_unicode(16#05D6) -> 16#E6;
from_unicode(16#05D7) -> 16#E7;
from_unicode(16#05D8) -> 16#E8;
from_unicode(16#05D9) -> 16#E9;
from_unicode(16#05DA) -> 16#EA;
from_unicode(16#05DB) -> 16#EB;
from_unicode(16#05DC) -> 16#EC;
from_unicode(16#05DD) -> 16#ED;
from_unicode(16#05DE) -> 16#EE;
from_unicode(16#05DF) -> 16#EF;
from_unicode(16#05E0) -> 16#F0;
from_unicode(16#05E1) -> 16#F1;
from_unicode(16#05E2) -> 16#F2;
from_unicode(16#05E3) -> 16#F3;
from_unicode(16#05E4) -> 16#F4;
from_unicode(16#05E5) -> 16#F5;
from_unicode(16#05E6) -> 16#F6;
from_unicode(16#05E7) -> 16#F7;
from_unicode(16#05E8) -> 16#F8;
from_unicode(16#05E9) -> 16#F9;
from_unicode(16#05EA) -> 16#FA;
from_unicode(16#200E) -> 16#FD;
from_unicode(16#200F) -> 16#FE;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
