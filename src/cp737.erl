%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MICSFT/PC/CP737.TXT AT 2016-08-19
-module(cp737).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#0391;
to_unicode(16#81) -> 16#0392;
to_unicode(16#82) -> 16#0393;
to_unicode(16#83) -> 16#0394;
to_unicode(16#84) -> 16#0395;
to_unicode(16#85) -> 16#0396;
to_unicode(16#86) -> 16#0397;
to_unicode(16#87) -> 16#0398;
to_unicode(16#88) -> 16#0399;
to_unicode(16#89) -> 16#039a;
to_unicode(16#8a) -> 16#039b;
to_unicode(16#8b) -> 16#039c;
to_unicode(16#8c) -> 16#039d;
to_unicode(16#8d) -> 16#039e;
to_unicode(16#8e) -> 16#039f;
to_unicode(16#8f) -> 16#03a0;
to_unicode(16#90) -> 16#03a1;
to_unicode(16#91) -> 16#03a3;
to_unicode(16#92) -> 16#03a4;
to_unicode(16#93) -> 16#03a5;
to_unicode(16#94) -> 16#03a6;
to_unicode(16#95) -> 16#03a7;
to_unicode(16#96) -> 16#03a8;
to_unicode(16#97) -> 16#03a9;
to_unicode(16#98) -> 16#03b1;
to_unicode(16#99) -> 16#03b2;
to_unicode(16#9a) -> 16#03b3;
to_unicode(16#9b) -> 16#03b4;
to_unicode(16#9c) -> 16#03b5;
to_unicode(16#9d) -> 16#03b6;
to_unicode(16#9e) -> 16#03b7;
to_unicode(16#9f) -> 16#03b8;
to_unicode(16#a0) -> 16#03b9;
to_unicode(16#a1) -> 16#03ba;
to_unicode(16#a2) -> 16#03bb;
to_unicode(16#a3) -> 16#03bc;
to_unicode(16#a4) -> 16#03bd;
to_unicode(16#a5) -> 16#03be;
to_unicode(16#a6) -> 16#03bf;
to_unicode(16#a7) -> 16#03c0;
to_unicode(16#a8) -> 16#03c1;
to_unicode(16#a9) -> 16#03c3;
to_unicode(16#aa) -> 16#03c2;
to_unicode(16#ab) -> 16#03c4;
to_unicode(16#ac) -> 16#03c5;
to_unicode(16#ad) -> 16#03c6;
to_unicode(16#ae) -> 16#03c7;
to_unicode(16#af) -> 16#03c8;
to_unicode(16#b0) -> 16#2591;
to_unicode(16#b1) -> 16#2592;
to_unicode(16#b2) -> 16#2593;
to_unicode(16#b3) -> 16#2502;
to_unicode(16#b4) -> 16#2524;
to_unicode(16#b5) -> 16#2561;
to_unicode(16#b6) -> 16#2562;
to_unicode(16#b7) -> 16#2556;
to_unicode(16#b8) -> 16#2555;
to_unicode(16#b9) -> 16#2563;
to_unicode(16#ba) -> 16#2551;
to_unicode(16#bb) -> 16#2557;
to_unicode(16#bc) -> 16#255d;
to_unicode(16#bd) -> 16#255c;
to_unicode(16#be) -> 16#255b;
to_unicode(16#bf) -> 16#2510;
to_unicode(16#c0) -> 16#2514;
to_unicode(16#c1) -> 16#2534;
to_unicode(16#c2) -> 16#252c;
to_unicode(16#c3) -> 16#251c;
to_unicode(16#c4) -> 16#2500;
to_unicode(16#c5) -> 16#253c;
to_unicode(16#c6) -> 16#255e;
to_unicode(16#c7) -> 16#255f;
to_unicode(16#c8) -> 16#255a;
to_unicode(16#c9) -> 16#2554;
to_unicode(16#ca) -> 16#2569;
to_unicode(16#cb) -> 16#2566;
to_unicode(16#cc) -> 16#2560;
to_unicode(16#cd) -> 16#2550;
to_unicode(16#ce) -> 16#256c;
to_unicode(16#cf) -> 16#2567;
to_unicode(16#d0) -> 16#2568;
to_unicode(16#d1) -> 16#2564;
to_unicode(16#d2) -> 16#2565;
to_unicode(16#d3) -> 16#2559;
to_unicode(16#d4) -> 16#2558;
to_unicode(16#d5) -> 16#2552;
to_unicode(16#d6) -> 16#2553;
to_unicode(16#d7) -> 16#256b;
to_unicode(16#d8) -> 16#256a;
to_unicode(16#d9) -> 16#2518;
to_unicode(16#da) -> 16#250c;
to_unicode(16#db) -> 16#2588;
to_unicode(16#dc) -> 16#2584;
to_unicode(16#dd) -> 16#258c;
to_unicode(16#de) -> 16#2590;
to_unicode(16#df) -> 16#2580;
to_unicode(16#e0) -> 16#03c9;
to_unicode(16#e1) -> 16#03ac;
to_unicode(16#e2) -> 16#03ad;
to_unicode(16#e3) -> 16#03ae;
to_unicode(16#e4) -> 16#03ca;
to_unicode(16#e5) -> 16#03af;
to_unicode(16#e6) -> 16#03cc;
to_unicode(16#e7) -> 16#03cd;
to_unicode(16#e8) -> 16#03cb;
to_unicode(16#e9) -> 16#03ce;
to_unicode(16#ea) -> 16#0386;
to_unicode(16#eb) -> 16#0388;
to_unicode(16#ec) -> 16#0389;
to_unicode(16#ed) -> 16#038a;
to_unicode(16#ee) -> 16#038c;
to_unicode(16#ef) -> 16#038e;
to_unicode(16#f0) -> 16#038f;
to_unicode(16#f1) -> 16#00b1;
to_unicode(16#f2) -> 16#2265;
to_unicode(16#f3) -> 16#2264;
to_unicode(16#f4) -> 16#03aa;
to_unicode(16#f5) -> 16#03ab;
to_unicode(16#f6) -> 16#00f7;
to_unicode(16#f7) -> 16#2248;
to_unicode(16#f8) -> 16#00b0;
to_unicode(16#f9) -> 16#2219;
to_unicode(16#fa) -> 16#00b7;
to_unicode(16#fb) -> 16#221a;
to_unicode(16#fc) -> 16#207f;
to_unicode(16#fd) -> 16#00b2;
to_unicode(16#fe) -> 16#25a0;
to_unicode(16#ff) -> 16#00a0;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#0391) -> 16#80;
from_unicode(16#0392) -> 16#81;
from_unicode(16#0393) -> 16#82;
from_unicode(16#0394) -> 16#83;
from_unicode(16#0395) -> 16#84;
from_unicode(16#0396) -> 16#85;
from_unicode(16#0397) -> 16#86;
from_unicode(16#0398) -> 16#87;
from_unicode(16#0399) -> 16#88;
from_unicode(16#039a) -> 16#89;
from_unicode(16#039b) -> 16#8a;
from_unicode(16#039c) -> 16#8b;
from_unicode(16#039d) -> 16#8c;
from_unicode(16#039e) -> 16#8d;
from_unicode(16#039f) -> 16#8e;
from_unicode(16#03a0) -> 16#8f;
from_unicode(16#03a1) -> 16#90;
from_unicode(16#03a3) -> 16#91;
from_unicode(16#03a4) -> 16#92;
from_unicode(16#03a5) -> 16#93;
from_unicode(16#03a6) -> 16#94;
from_unicode(16#03a7) -> 16#95;
from_unicode(16#03a8) -> 16#96;
from_unicode(16#03a9) -> 16#97;
from_unicode(16#03b1) -> 16#98;
from_unicode(16#03b2) -> 16#99;
from_unicode(16#03b3) -> 16#9a;
from_unicode(16#03b4) -> 16#9b;
from_unicode(16#03b5) -> 16#9c;
from_unicode(16#03b6) -> 16#9d;
from_unicode(16#03b7) -> 16#9e;
from_unicode(16#03b8) -> 16#9f;
from_unicode(16#03b9) -> 16#a0;
from_unicode(16#03ba) -> 16#a1;
from_unicode(16#03bb) -> 16#a2;
from_unicode(16#03bc) -> 16#a3;
from_unicode(16#03bd) -> 16#a4;
from_unicode(16#03be) -> 16#a5;
from_unicode(16#03bf) -> 16#a6;
from_unicode(16#03c0) -> 16#a7;
from_unicode(16#03c1) -> 16#a8;
from_unicode(16#03c3) -> 16#a9;
from_unicode(16#03c2) -> 16#aa;
from_unicode(16#03c4) -> 16#ab;
from_unicode(16#03c5) -> 16#ac;
from_unicode(16#03c6) -> 16#ad;
from_unicode(16#03c7) -> 16#ae;
from_unicode(16#03c8) -> 16#af;
from_unicode(16#2591) -> 16#b0;
from_unicode(16#2592) -> 16#b1;
from_unicode(16#2593) -> 16#b2;
from_unicode(16#2502) -> 16#b3;
from_unicode(16#2524) -> 16#b4;
from_unicode(16#2561) -> 16#b5;
from_unicode(16#2562) -> 16#b6;
from_unicode(16#2556) -> 16#b7;
from_unicode(16#2555) -> 16#b8;
from_unicode(16#2563) -> 16#b9;
from_unicode(16#2551) -> 16#ba;
from_unicode(16#2557) -> 16#bb;
from_unicode(16#255d) -> 16#bc;
from_unicode(16#255c) -> 16#bd;
from_unicode(16#255b) -> 16#be;
from_unicode(16#2510) -> 16#bf;
from_unicode(16#2514) -> 16#c0;
from_unicode(16#2534) -> 16#c1;
from_unicode(16#252c) -> 16#c2;
from_unicode(16#251c) -> 16#c3;
from_unicode(16#2500) -> 16#c4;
from_unicode(16#253c) -> 16#c5;
from_unicode(16#255e) -> 16#c6;
from_unicode(16#255f) -> 16#c7;
from_unicode(16#255a) -> 16#c8;
from_unicode(16#2554) -> 16#c9;
from_unicode(16#2569) -> 16#ca;
from_unicode(16#2566) -> 16#cb;
from_unicode(16#2560) -> 16#cc;
from_unicode(16#2550) -> 16#cd;
from_unicode(16#256c) -> 16#ce;
from_unicode(16#2567) -> 16#cf;
from_unicode(16#2568) -> 16#d0;
from_unicode(16#2564) -> 16#d1;
from_unicode(16#2565) -> 16#d2;
from_unicode(16#2559) -> 16#d3;
from_unicode(16#2558) -> 16#d4;
from_unicode(16#2552) -> 16#d5;
from_unicode(16#2553) -> 16#d6;
from_unicode(16#256b) -> 16#d7;
from_unicode(16#256a) -> 16#d8;
from_unicode(16#2518) -> 16#d9;
from_unicode(16#250c) -> 16#da;
from_unicode(16#2588) -> 16#db;
from_unicode(16#2584) -> 16#dc;
from_unicode(16#258c) -> 16#dd;
from_unicode(16#2590) -> 16#de;
from_unicode(16#2580) -> 16#df;
from_unicode(16#03c9) -> 16#e0;
from_unicode(16#03ac) -> 16#e1;
from_unicode(16#03ad) -> 16#e2;
from_unicode(16#03ae) -> 16#e3;
from_unicode(16#03ca) -> 16#e4;
from_unicode(16#03af) -> 16#e5;
from_unicode(16#03cc) -> 16#e6;
from_unicode(16#03cd) -> 16#e7;
from_unicode(16#03cb) -> 16#e8;
from_unicode(16#03ce) -> 16#e9;
from_unicode(16#0386) -> 16#ea;
from_unicode(16#0388) -> 16#eb;
from_unicode(16#0389) -> 16#ec;
from_unicode(16#038a) -> 16#ed;
from_unicode(16#038c) -> 16#ee;
from_unicode(16#038e) -> 16#ef;
from_unicode(16#038f) -> 16#f0;
from_unicode(16#00b1) -> 16#f1;
from_unicode(16#2265) -> 16#f2;
from_unicode(16#2264) -> 16#f3;
from_unicode(16#03aa) -> 16#f4;
from_unicode(16#03ab) -> 16#f5;
from_unicode(16#00f7) -> 16#f6;
from_unicode(16#2248) -> 16#f7;
from_unicode(16#00b0) -> 16#f8;
from_unicode(16#2219) -> 16#f9;
from_unicode(16#00b7) -> 16#fa;
from_unicode(16#221a) -> 16#fb;
from_unicode(16#207f) -> 16#fc;
from_unicode(16#00b2) -> 16#fd;
from_unicode(16#25a0) -> 16#fe;
from_unicode(16#00a0) -> 16#ff;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
