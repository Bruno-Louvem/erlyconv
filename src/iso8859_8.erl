%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-8.TXT AT 2016-08-19
-module(iso8859_8).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#AA) -> 16#00D7;
to_unicode(16#BA) -> 16#00F7;
to_unicode(16#DF) -> 16#2017;
to_unicode(16#E0) -> 16#05D0;
to_unicode(16#E1) -> 16#05D1;
to_unicode(16#E2) -> 16#05D2;
to_unicode(16#E3) -> 16#05D3;
to_unicode(16#E4) -> 16#05D4;
to_unicode(16#E5) -> 16#05D5;
to_unicode(16#E6) -> 16#05D6;
to_unicode(16#E7) -> 16#05D7;
to_unicode(16#E8) -> 16#05D8;
to_unicode(16#E9) -> 16#05D9;
to_unicode(16#EA) -> 16#05DA;
to_unicode(16#EB) -> 16#05DB;
to_unicode(16#EC) -> 16#05DC;
to_unicode(16#ED) -> 16#05DD;
to_unicode(16#EE) -> 16#05DE;
to_unicode(16#EF) -> 16#05DF;
to_unicode(16#F0) -> 16#05E0;
to_unicode(16#F1) -> 16#05E1;
to_unicode(16#F2) -> 16#05E2;
to_unicode(16#F3) -> 16#05E3;
to_unicode(16#F4) -> 16#05E4;
to_unicode(16#F5) -> 16#05E5;
to_unicode(16#F6) -> 16#05E6;
to_unicode(16#F7) -> 16#05E7;
to_unicode(16#F8) -> 16#05E8;
to_unicode(16#F9) -> 16#05E9;
to_unicode(16#FA) -> 16#05EA;
to_unicode(16#FD) -> 16#200E;
to_unicode(16#FE) -> 16#200F;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#00D7) -> 16#AA;
from_unicode(16#00F7) -> 16#BA;
from_unicode(16#2017) -> 16#DF;
from_unicode(16#05D0) -> 16#E0;
from_unicode(16#05D1) -> 16#E1;
from_unicode(16#05D2) -> 16#E2;
from_unicode(16#05D3) -> 16#E3;
from_unicode(16#05D4) -> 16#E4;
from_unicode(16#05D5) -> 16#E5;
from_unicode(16#05D6) -> 16#E6;
from_unicode(16#05D7) -> 16#E7;
from_unicode(16#05D8) -> 16#E8;
from_unicode(16#05D9) -> 16#E9;
from_unicode(16#05DA) -> 16#EA;
from_unicode(16#05DB) -> 16#EB;
from_unicode(16#05DC) -> 16#EC;
from_unicode(16#05DD) -> 16#ED;
from_unicode(16#05DE) -> 16#EE;
from_unicode(16#05DF) -> 16#EF;
from_unicode(16#05E0) -> 16#F0;
from_unicode(16#05E1) -> 16#F1;
from_unicode(16#05E2) -> 16#F2;
from_unicode(16#05E3) -> 16#F3;
from_unicode(16#05E4) -> 16#F4;
from_unicode(16#05E5) -> 16#F5;
from_unicode(16#05E6) -> 16#F6;
from_unicode(16#05E7) -> 16#F7;
from_unicode(16#05E8) -> 16#F8;
from_unicode(16#05E9) -> 16#F9;
from_unicode(16#05EA) -> 16#FA;
from_unicode(16#200E) -> 16#FD;
from_unicode(16#200F) -> 16#FE;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
