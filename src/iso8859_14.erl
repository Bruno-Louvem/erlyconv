%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-14.TXT AT 2016-08-19
-module(iso8859_14).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#A1) -> 16#1E02;
to_unicode(16#A2) -> 16#1E03;
to_unicode(16#A4) -> 16#010A;
to_unicode(16#A5) -> 16#010B;
to_unicode(16#A6) -> 16#1E0A;
to_unicode(16#A8) -> 16#1E80;
to_unicode(16#AA) -> 16#1E82;
to_unicode(16#AB) -> 16#1E0B;
to_unicode(16#AC) -> 16#1EF2;
to_unicode(16#AF) -> 16#0178;
to_unicode(16#B0) -> 16#1E1E;
to_unicode(16#B1) -> 16#1E1F;
to_unicode(16#B2) -> 16#0120;
to_unicode(16#B3) -> 16#0121;
to_unicode(16#B4) -> 16#1E40;
to_unicode(16#B5) -> 16#1E41;
to_unicode(16#B7) -> 16#1E56;
to_unicode(16#B8) -> 16#1E81;
to_unicode(16#B9) -> 16#1E57;
to_unicode(16#BA) -> 16#1E83;
to_unicode(16#BB) -> 16#1E60;
to_unicode(16#BC) -> 16#1EF3;
to_unicode(16#BD) -> 16#1E84;
to_unicode(16#BE) -> 16#1E85;
to_unicode(16#BF) -> 16#1E61;
to_unicode(16#D0) -> 16#0174;
to_unicode(16#D7) -> 16#1E6A;
to_unicode(16#DE) -> 16#0176;
to_unicode(16#F0) -> 16#0175;
to_unicode(16#F7) -> 16#1E6B;
to_unicode(16#FE) -> 16#0177;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#1E02) -> 16#A1;
from_unicode(16#1E03) -> 16#A2;
from_unicode(16#010A) -> 16#A4;
from_unicode(16#010B) -> 16#A5;
from_unicode(16#1E0A) -> 16#A6;
from_unicode(16#1E80) -> 16#A8;
from_unicode(16#1E82) -> 16#AA;
from_unicode(16#1E0B) -> 16#AB;
from_unicode(16#1EF2) -> 16#AC;
from_unicode(16#0178) -> 16#AF;
from_unicode(16#1E1E) -> 16#B0;
from_unicode(16#1E1F) -> 16#B1;
from_unicode(16#0120) -> 16#B2;
from_unicode(16#0121) -> 16#B3;
from_unicode(16#1E40) -> 16#B4;
from_unicode(16#1E41) -> 16#B5;
from_unicode(16#1E56) -> 16#B7;
from_unicode(16#1E81) -> 16#B8;
from_unicode(16#1E57) -> 16#B9;
from_unicode(16#1E83) -> 16#BA;
from_unicode(16#1E60) -> 16#BB;
from_unicode(16#1EF3) -> 16#BC;
from_unicode(16#1E84) -> 16#BD;
from_unicode(16#1E85) -> 16#BE;
from_unicode(16#1E61) -> 16#BF;
from_unicode(16#0174) -> 16#D0;
from_unicode(16#1E6A) -> 16#D7;
from_unicode(16#0176) -> 16#DE;
from_unicode(16#0175) -> 16#F0;
from_unicode(16#1E6B) -> 16#F7;
from_unicode(16#0177) -> 16#FE;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
