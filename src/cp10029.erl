%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MICSFT/MAC/LATIN2.TXT AT 2016-08-19
-module(cp10029).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#00C4;
to_unicode(16#81) -> 16#0100;
to_unicode(16#82) -> 16#0101;
to_unicode(16#83) -> 16#00C9;
to_unicode(16#84) -> 16#0104;
to_unicode(16#85) -> 16#00D6;
to_unicode(16#86) -> 16#00DC;
to_unicode(16#87) -> 16#00E1;
to_unicode(16#88) -> 16#0105;
to_unicode(16#89) -> 16#010C;
to_unicode(16#8A) -> 16#00E4;
to_unicode(16#8B) -> 16#010D;
to_unicode(16#8C) -> 16#0106;
to_unicode(16#8D) -> 16#0107;
to_unicode(16#8E) -> 16#00E9;
to_unicode(16#8F) -> 16#0179;
to_unicode(16#90) -> 16#017A;
to_unicode(16#91) -> 16#010E;
to_unicode(16#92) -> 16#00ED;
to_unicode(16#93) -> 16#010F;
to_unicode(16#94) -> 16#0112;
to_unicode(16#95) -> 16#0113;
to_unicode(16#96) -> 16#0116;
to_unicode(16#97) -> 16#00F3;
to_unicode(16#98) -> 16#0117;
to_unicode(16#99) -> 16#00F4;
to_unicode(16#9A) -> 16#00F6;
to_unicode(16#9B) -> 16#00F5;
to_unicode(16#9C) -> 16#00FA;
to_unicode(16#9D) -> 16#011A;
to_unicode(16#9E) -> 16#011B;
to_unicode(16#9F) -> 16#00FC;
to_unicode(16#A0) -> 16#2020;
to_unicode(16#A1) -> 16#00B0;
to_unicode(16#A2) -> 16#0118;
to_unicode(16#A4) -> 16#00A7;
to_unicode(16#A5) -> 16#2022;
to_unicode(16#A6) -> 16#00B6;
to_unicode(16#A7) -> 16#00DF;
to_unicode(16#A8) -> 16#00AE;
to_unicode(16#AA) -> 16#2122;
to_unicode(16#AB) -> 16#0119;
to_unicode(16#AC) -> 16#00A8;
to_unicode(16#AD) -> 16#2260;
to_unicode(16#AE) -> 16#0123;
to_unicode(16#AF) -> 16#012E;
to_unicode(16#B0) -> 16#012F;
to_unicode(16#B1) -> 16#012A;
to_unicode(16#B2) -> 16#2264;
to_unicode(16#B3) -> 16#2265;
to_unicode(16#B4) -> 16#012B;
to_unicode(16#B5) -> 16#0136;
to_unicode(16#B6) -> 16#2202;
to_unicode(16#B7) -> 16#2211;
to_unicode(16#B8) -> 16#0142;
to_unicode(16#B9) -> 16#013B;
to_unicode(16#BA) -> 16#013C;
to_unicode(16#BB) -> 16#013D;
to_unicode(16#BC) -> 16#013E;
to_unicode(16#BD) -> 16#0139;
to_unicode(16#BE) -> 16#013A;
to_unicode(16#BF) -> 16#0145;
to_unicode(16#C0) -> 16#0146;
to_unicode(16#C1) -> 16#0143;
to_unicode(16#C2) -> 16#00AC;
to_unicode(16#C3) -> 16#221A;
to_unicode(16#C4) -> 16#0144;
to_unicode(16#C5) -> 16#0147;
to_unicode(16#C6) -> 16#2206;
to_unicode(16#C7) -> 16#00AB;
to_unicode(16#C8) -> 16#00BB;
to_unicode(16#C9) -> 16#2026;
to_unicode(16#CA) -> 16#00A0;
to_unicode(16#CB) -> 16#0148;
to_unicode(16#CC) -> 16#0150;
to_unicode(16#CD) -> 16#00D5;
to_unicode(16#CE) -> 16#0151;
to_unicode(16#CF) -> 16#014C;
to_unicode(16#D0) -> 16#2013;
to_unicode(16#D1) -> 16#2014;
to_unicode(16#D2) -> 16#201C;
to_unicode(16#D3) -> 16#201D;
to_unicode(16#D4) -> 16#2018;
to_unicode(16#D5) -> 16#2019;
to_unicode(16#D6) -> 16#00F7;
to_unicode(16#D7) -> 16#25CA;
to_unicode(16#D8) -> 16#014D;
to_unicode(16#D9) -> 16#0154;
to_unicode(16#DA) -> 16#0155;
to_unicode(16#DB) -> 16#0158;
to_unicode(16#DC) -> 16#2039;
to_unicode(16#DD) -> 16#203A;
to_unicode(16#DE) -> 16#0159;
to_unicode(16#DF) -> 16#0156;
to_unicode(16#E0) -> 16#0157;
to_unicode(16#E1) -> 16#0160;
to_unicode(16#E2) -> 16#201A;
to_unicode(16#E3) -> 16#201E;
to_unicode(16#E4) -> 16#0161;
to_unicode(16#E5) -> 16#015A;
to_unicode(16#E6) -> 16#015B;
to_unicode(16#E7) -> 16#00C1;
to_unicode(16#E8) -> 16#0164;
to_unicode(16#E9) -> 16#0165;
to_unicode(16#EA) -> 16#00CD;
to_unicode(16#EB) -> 16#017D;
to_unicode(16#EC) -> 16#017E;
to_unicode(16#ED) -> 16#016A;
to_unicode(16#EE) -> 16#00D3;
to_unicode(16#EF) -> 16#00D4;
to_unicode(16#F0) -> 16#016B;
to_unicode(16#F1) -> 16#016E;
to_unicode(16#F2) -> 16#00DA;
to_unicode(16#F3) -> 16#016F;
to_unicode(16#F4) -> 16#0170;
to_unicode(16#F5) -> 16#0171;
to_unicode(16#F6) -> 16#0172;
to_unicode(16#F7) -> 16#0173;
to_unicode(16#F8) -> 16#00DD;
to_unicode(16#F9) -> 16#00FD;
to_unicode(16#FA) -> 16#0137;
to_unicode(16#FB) -> 16#017B;
to_unicode(16#FC) -> 16#0141;
to_unicode(16#FD) -> 16#017C;
to_unicode(16#FE) -> 16#0122;
to_unicode(16#FF) -> 16#02C7;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#00C4) -> 16#80;
from_unicode(16#0100) -> 16#81;
from_unicode(16#0101) -> 16#82;
from_unicode(16#00C9) -> 16#83;
from_unicode(16#0104) -> 16#84;
from_unicode(16#00D6) -> 16#85;
from_unicode(16#00DC) -> 16#86;
from_unicode(16#00E1) -> 16#87;
from_unicode(16#0105) -> 16#88;
from_unicode(16#010C) -> 16#89;
from_unicode(16#00E4) -> 16#8A;
from_unicode(16#010D) -> 16#8B;
from_unicode(16#0106) -> 16#8C;
from_unicode(16#0107) -> 16#8D;
from_unicode(16#00E9) -> 16#8E;
from_unicode(16#0179) -> 16#8F;
from_unicode(16#017A) -> 16#90;
from_unicode(16#010E) -> 16#91;
from_unicode(16#00ED) -> 16#92;
from_unicode(16#010F) -> 16#93;
from_unicode(16#0112) -> 16#94;
from_unicode(16#0113) -> 16#95;
from_unicode(16#0116) -> 16#96;
from_unicode(16#00F3) -> 16#97;
from_unicode(16#0117) -> 16#98;
from_unicode(16#00F4) -> 16#99;
from_unicode(16#00F6) -> 16#9A;
from_unicode(16#00F5) -> 16#9B;
from_unicode(16#00FA) -> 16#9C;
from_unicode(16#011A) -> 16#9D;
from_unicode(16#011B) -> 16#9E;
from_unicode(16#00FC) -> 16#9F;
from_unicode(16#2020) -> 16#A0;
from_unicode(16#00B0) -> 16#A1;
from_unicode(16#0118) -> 16#A2;
from_unicode(16#00A7) -> 16#A4;
from_unicode(16#2022) -> 16#A5;
from_unicode(16#00B6) -> 16#A6;
from_unicode(16#00DF) -> 16#A7;
from_unicode(16#00AE) -> 16#A8;
from_unicode(16#2122) -> 16#AA;
from_unicode(16#0119) -> 16#AB;
from_unicode(16#00A8) -> 16#AC;
from_unicode(16#2260) -> 16#AD;
from_unicode(16#0123) -> 16#AE;
from_unicode(16#012E) -> 16#AF;
from_unicode(16#012F) -> 16#B0;
from_unicode(16#012A) -> 16#B1;
from_unicode(16#2264) -> 16#B2;
from_unicode(16#2265) -> 16#B3;
from_unicode(16#012B) -> 16#B4;
from_unicode(16#0136) -> 16#B5;
from_unicode(16#2202) -> 16#B6;
from_unicode(16#2211) -> 16#B7;
from_unicode(16#0142) -> 16#B8;
from_unicode(16#013B) -> 16#B9;
from_unicode(16#013C) -> 16#BA;
from_unicode(16#013D) -> 16#BB;
from_unicode(16#013E) -> 16#BC;
from_unicode(16#0139) -> 16#BD;
from_unicode(16#013A) -> 16#BE;
from_unicode(16#0145) -> 16#BF;
from_unicode(16#0146) -> 16#C0;
from_unicode(16#0143) -> 16#C1;
from_unicode(16#00AC) -> 16#C2;
from_unicode(16#221A) -> 16#C3;
from_unicode(16#0144) -> 16#C4;
from_unicode(16#0147) -> 16#C5;
from_unicode(16#2206) -> 16#C6;
from_unicode(16#00AB) -> 16#C7;
from_unicode(16#00BB) -> 16#C8;
from_unicode(16#2026) -> 16#C9;
from_unicode(16#00A0) -> 16#CA;
from_unicode(16#0148) -> 16#CB;
from_unicode(16#0150) -> 16#CC;
from_unicode(16#00D5) -> 16#CD;
from_unicode(16#0151) -> 16#CE;
from_unicode(16#014C) -> 16#CF;
from_unicode(16#2013) -> 16#D0;
from_unicode(16#2014) -> 16#D1;
from_unicode(16#201C) -> 16#D2;
from_unicode(16#201D) -> 16#D3;
from_unicode(16#2018) -> 16#D4;
from_unicode(16#2019) -> 16#D5;
from_unicode(16#00F7) -> 16#D6;
from_unicode(16#25CA) -> 16#D7;
from_unicode(16#014D) -> 16#D8;
from_unicode(16#0154) -> 16#D9;
from_unicode(16#0155) -> 16#DA;
from_unicode(16#0158) -> 16#DB;
from_unicode(16#2039) -> 16#DC;
from_unicode(16#203A) -> 16#DD;
from_unicode(16#0159) -> 16#DE;
from_unicode(16#0156) -> 16#DF;
from_unicode(16#0157) -> 16#E0;
from_unicode(16#0160) -> 16#E1;
from_unicode(16#201A) -> 16#E2;
from_unicode(16#201E) -> 16#E3;
from_unicode(16#0161) -> 16#E4;
from_unicode(16#015A) -> 16#E5;
from_unicode(16#015B) -> 16#E6;
from_unicode(16#00C1) -> 16#E7;
from_unicode(16#0164) -> 16#E8;
from_unicode(16#0165) -> 16#E9;
from_unicode(16#00CD) -> 16#EA;
from_unicode(16#017D) -> 16#EB;
from_unicode(16#017E) -> 16#EC;
from_unicode(16#016A) -> 16#ED;
from_unicode(16#00D3) -> 16#EE;
from_unicode(16#00D4) -> 16#EF;
from_unicode(16#016B) -> 16#F0;
from_unicode(16#016E) -> 16#F1;
from_unicode(16#00DA) -> 16#F2;
from_unicode(16#016F) -> 16#F3;
from_unicode(16#0170) -> 16#F4;
from_unicode(16#0171) -> 16#F5;
from_unicode(16#0172) -> 16#F6;
from_unicode(16#0173) -> 16#F7;
from_unicode(16#00DD) -> 16#F8;
from_unicode(16#00FD) -> 16#F9;
from_unicode(16#0137) -> 16#FA;
from_unicode(16#017B) -> 16#FB;
from_unicode(16#0141) -> 16#FC;
from_unicode(16#017C) -> 16#FD;
from_unicode(16#0122) -> 16#FE;
from_unicode(16#02C7) -> 16#FF;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
