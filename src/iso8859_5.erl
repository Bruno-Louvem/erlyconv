%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-5.TXT AT 2016-08-19
-module(iso8859_5).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#A1) -> 16#0401;
to_unicode(16#A2) -> 16#0402;
to_unicode(16#A3) -> 16#0403;
to_unicode(16#A4) -> 16#0404;
to_unicode(16#A5) -> 16#0405;
to_unicode(16#A6) -> 16#0406;
to_unicode(16#A7) -> 16#0407;
to_unicode(16#A8) -> 16#0408;
to_unicode(16#A9) -> 16#0409;
to_unicode(16#AA) -> 16#040A;
to_unicode(16#AB) -> 16#040B;
to_unicode(16#AC) -> 16#040C;
to_unicode(16#AE) -> 16#040E;
to_unicode(16#AF) -> 16#040F;
to_unicode(16#B0) -> 16#0410;
to_unicode(16#B1) -> 16#0411;
to_unicode(16#B2) -> 16#0412;
to_unicode(16#B3) -> 16#0413;
to_unicode(16#B4) -> 16#0414;
to_unicode(16#B5) -> 16#0415;
to_unicode(16#B6) -> 16#0416;
to_unicode(16#B7) -> 16#0417;
to_unicode(16#B8) -> 16#0418;
to_unicode(16#B9) -> 16#0419;
to_unicode(16#BA) -> 16#041A;
to_unicode(16#BB) -> 16#041B;
to_unicode(16#BC) -> 16#041C;
to_unicode(16#BD) -> 16#041D;
to_unicode(16#BE) -> 16#041E;
to_unicode(16#BF) -> 16#041F;
to_unicode(16#C0) -> 16#0420;
to_unicode(16#C1) -> 16#0421;
to_unicode(16#C2) -> 16#0422;
to_unicode(16#C3) -> 16#0423;
to_unicode(16#C4) -> 16#0424;
to_unicode(16#C5) -> 16#0425;
to_unicode(16#C6) -> 16#0426;
to_unicode(16#C7) -> 16#0427;
to_unicode(16#C8) -> 16#0428;
to_unicode(16#C9) -> 16#0429;
to_unicode(16#CA) -> 16#042A;
to_unicode(16#CB) -> 16#042B;
to_unicode(16#CC) -> 16#042C;
to_unicode(16#CD) -> 16#042D;
to_unicode(16#CE) -> 16#042E;
to_unicode(16#CF) -> 16#042F;
to_unicode(16#D0) -> 16#0430;
to_unicode(16#D1) -> 16#0431;
to_unicode(16#D2) -> 16#0432;
to_unicode(16#D3) -> 16#0433;
to_unicode(16#D4) -> 16#0434;
to_unicode(16#D5) -> 16#0435;
to_unicode(16#D6) -> 16#0436;
to_unicode(16#D7) -> 16#0437;
to_unicode(16#D8) -> 16#0438;
to_unicode(16#D9) -> 16#0439;
to_unicode(16#DA) -> 16#043A;
to_unicode(16#DB) -> 16#043B;
to_unicode(16#DC) -> 16#043C;
to_unicode(16#DD) -> 16#043D;
to_unicode(16#DE) -> 16#043E;
to_unicode(16#DF) -> 16#043F;
to_unicode(16#E0) -> 16#0440;
to_unicode(16#E1) -> 16#0441;
to_unicode(16#E2) -> 16#0442;
to_unicode(16#E3) -> 16#0443;
to_unicode(16#E4) -> 16#0444;
to_unicode(16#E5) -> 16#0445;
to_unicode(16#E6) -> 16#0446;
to_unicode(16#E7) -> 16#0447;
to_unicode(16#E8) -> 16#0448;
to_unicode(16#E9) -> 16#0449;
to_unicode(16#EA) -> 16#044A;
to_unicode(16#EB) -> 16#044B;
to_unicode(16#EC) -> 16#044C;
to_unicode(16#ED) -> 16#044D;
to_unicode(16#EE) -> 16#044E;
to_unicode(16#EF) -> 16#044F;
to_unicode(16#F0) -> 16#2116;
to_unicode(16#F1) -> 16#0451;
to_unicode(16#F2) -> 16#0452;
to_unicode(16#F3) -> 16#0453;
to_unicode(16#F4) -> 16#0454;
to_unicode(16#F5) -> 16#0455;
to_unicode(16#F6) -> 16#0456;
to_unicode(16#F7) -> 16#0457;
to_unicode(16#F8) -> 16#0458;
to_unicode(16#F9) -> 16#0459;
to_unicode(16#FA) -> 16#045A;
to_unicode(16#FB) -> 16#045B;
to_unicode(16#FC) -> 16#045C;
to_unicode(16#FD) -> 16#00A7;
to_unicode(16#FE) -> 16#045E;
to_unicode(16#FF) -> 16#045F;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#0401) -> 16#A1;
from_unicode(16#0402) -> 16#A2;
from_unicode(16#0403) -> 16#A3;
from_unicode(16#0404) -> 16#A4;
from_unicode(16#0405) -> 16#A5;
from_unicode(16#0406) -> 16#A6;
from_unicode(16#0407) -> 16#A7;
from_unicode(16#0408) -> 16#A8;
from_unicode(16#0409) -> 16#A9;
from_unicode(16#040A) -> 16#AA;
from_unicode(16#040B) -> 16#AB;
from_unicode(16#040C) -> 16#AC;
from_unicode(16#040E) -> 16#AE;
from_unicode(16#040F) -> 16#AF;
from_unicode(16#0410) -> 16#B0;
from_unicode(16#0411) -> 16#B1;
from_unicode(16#0412) -> 16#B2;
from_unicode(16#0413) -> 16#B3;
from_unicode(16#0414) -> 16#B4;
from_unicode(16#0415) -> 16#B5;
from_unicode(16#0416) -> 16#B6;
from_unicode(16#0417) -> 16#B7;
from_unicode(16#0418) -> 16#B8;
from_unicode(16#0419) -> 16#B9;
from_unicode(16#041A) -> 16#BA;
from_unicode(16#041B) -> 16#BB;
from_unicode(16#041C) -> 16#BC;
from_unicode(16#041D) -> 16#BD;
from_unicode(16#041E) -> 16#BE;
from_unicode(16#041F) -> 16#BF;
from_unicode(16#0420) -> 16#C0;
from_unicode(16#0421) -> 16#C1;
from_unicode(16#0422) -> 16#C2;
from_unicode(16#0423) -> 16#C3;
from_unicode(16#0424) -> 16#C4;
from_unicode(16#0425) -> 16#C5;
from_unicode(16#0426) -> 16#C6;
from_unicode(16#0427) -> 16#C7;
from_unicode(16#0428) -> 16#C8;
from_unicode(16#0429) -> 16#C9;
from_unicode(16#042A) -> 16#CA;
from_unicode(16#042B) -> 16#CB;
from_unicode(16#042C) -> 16#CC;
from_unicode(16#042D) -> 16#CD;
from_unicode(16#042E) -> 16#CE;
from_unicode(16#042F) -> 16#CF;
from_unicode(16#0430) -> 16#D0;
from_unicode(16#0431) -> 16#D1;
from_unicode(16#0432) -> 16#D2;
from_unicode(16#0433) -> 16#D3;
from_unicode(16#0434) -> 16#D4;
from_unicode(16#0435) -> 16#D5;
from_unicode(16#0436) -> 16#D6;
from_unicode(16#0437) -> 16#D7;
from_unicode(16#0438) -> 16#D8;
from_unicode(16#0439) -> 16#D9;
from_unicode(16#043A) -> 16#DA;
from_unicode(16#043B) -> 16#DB;
from_unicode(16#043C) -> 16#DC;
from_unicode(16#043D) -> 16#DD;
from_unicode(16#043E) -> 16#DE;
from_unicode(16#043F) -> 16#DF;
from_unicode(16#0440) -> 16#E0;
from_unicode(16#0441) -> 16#E1;
from_unicode(16#0442) -> 16#E2;
from_unicode(16#0443) -> 16#E3;
from_unicode(16#0444) -> 16#E4;
from_unicode(16#0445) -> 16#E5;
from_unicode(16#0446) -> 16#E6;
from_unicode(16#0447) -> 16#E7;
from_unicode(16#0448) -> 16#E8;
from_unicode(16#0449) -> 16#E9;
from_unicode(16#044A) -> 16#EA;
from_unicode(16#044B) -> 16#EB;
from_unicode(16#044C) -> 16#EC;
from_unicode(16#044D) -> 16#ED;
from_unicode(16#044E) -> 16#EE;
from_unicode(16#044F) -> 16#EF;
from_unicode(16#2116) -> 16#F0;
from_unicode(16#0451) -> 16#F1;
from_unicode(16#0452) -> 16#F2;
from_unicode(16#0453) -> 16#F3;
from_unicode(16#0454) -> 16#F4;
from_unicode(16#0455) -> 16#F5;
from_unicode(16#0456) -> 16#F6;
from_unicode(16#0457) -> 16#F7;
from_unicode(16#0458) -> 16#F8;
from_unicode(16#0459) -> 16#F9;
from_unicode(16#045A) -> 16#FA;
from_unicode(16#045B) -> 16#FB;
from_unicode(16#045C) -> 16#FC;
from_unicode(16#00A7) -> 16#FD;
from_unicode(16#045E) -> 16#FE;
from_unicode(16#045F) -> 16#FF;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
