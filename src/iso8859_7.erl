%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-7.TXT AT 2016-08-19
-module(iso8859_7).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#A1) -> 16#2018;
to_unicode(16#A2) -> 16#2019;
to_unicode(16#A4) -> 16#20AC;
to_unicode(16#A5) -> 16#20AF;
to_unicode(16#AA) -> 16#037A;
to_unicode(16#AF) -> 16#2015;
to_unicode(16#B4) -> 16#0384;
to_unicode(16#B5) -> 16#0385;
to_unicode(16#B6) -> 16#0386;
to_unicode(16#B8) -> 16#0388;
to_unicode(16#B9) -> 16#0389;
to_unicode(16#BA) -> 16#038A;
to_unicode(16#BC) -> 16#038C;
to_unicode(16#BE) -> 16#038E;
to_unicode(16#BF) -> 16#038F;
to_unicode(16#C0) -> 16#0390;
to_unicode(16#C1) -> 16#0391;
to_unicode(16#C2) -> 16#0392;
to_unicode(16#C3) -> 16#0393;
to_unicode(16#C4) -> 16#0394;
to_unicode(16#C5) -> 16#0395;
to_unicode(16#C6) -> 16#0396;
to_unicode(16#C7) -> 16#0397;
to_unicode(16#C8) -> 16#0398;
to_unicode(16#C9) -> 16#0399;
to_unicode(16#CA) -> 16#039A;
to_unicode(16#CB) -> 16#039B;
to_unicode(16#CC) -> 16#039C;
to_unicode(16#CD) -> 16#039D;
to_unicode(16#CE) -> 16#039E;
to_unicode(16#CF) -> 16#039F;
to_unicode(16#D0) -> 16#03A0;
to_unicode(16#D1) -> 16#03A1;
to_unicode(16#D3) -> 16#03A3;
to_unicode(16#D4) -> 16#03A4;
to_unicode(16#D5) -> 16#03A5;
to_unicode(16#D6) -> 16#03A6;
to_unicode(16#D7) -> 16#03A7;
to_unicode(16#D8) -> 16#03A8;
to_unicode(16#D9) -> 16#03A9;
to_unicode(16#DA) -> 16#03AA;
to_unicode(16#DB) -> 16#03AB;
to_unicode(16#DC) -> 16#03AC;
to_unicode(16#DD) -> 16#03AD;
to_unicode(16#DE) -> 16#03AE;
to_unicode(16#DF) -> 16#03AF;
to_unicode(16#E0) -> 16#03B0;
to_unicode(16#E1) -> 16#03B1;
to_unicode(16#E2) -> 16#03B2;
to_unicode(16#E3) -> 16#03B3;
to_unicode(16#E4) -> 16#03B4;
to_unicode(16#E5) -> 16#03B5;
to_unicode(16#E6) -> 16#03B6;
to_unicode(16#E7) -> 16#03B7;
to_unicode(16#E8) -> 16#03B8;
to_unicode(16#E9) -> 16#03B9;
to_unicode(16#EA) -> 16#03BA;
to_unicode(16#EB) -> 16#03BB;
to_unicode(16#EC) -> 16#03BC;
to_unicode(16#ED) -> 16#03BD;
to_unicode(16#EE) -> 16#03BE;
to_unicode(16#EF) -> 16#03BF;
to_unicode(16#F0) -> 16#03C0;
to_unicode(16#F1) -> 16#03C1;
to_unicode(16#F2) -> 16#03C2;
to_unicode(16#F3) -> 16#03C3;
to_unicode(16#F4) -> 16#03C4;
to_unicode(16#F5) -> 16#03C5;
to_unicode(16#F6) -> 16#03C6;
to_unicode(16#F7) -> 16#03C7;
to_unicode(16#F8) -> 16#03C8;
to_unicode(16#F9) -> 16#03C9;
to_unicode(16#FA) -> 16#03CA;
to_unicode(16#FB) -> 16#03CB;
to_unicode(16#FC) -> 16#03CC;
to_unicode(16#FD) -> 16#03CD;
to_unicode(16#FE) -> 16#03CE;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#2018) -> 16#A1;
from_unicode(16#2019) -> 16#A2;
from_unicode(16#20AC) -> 16#A4;
from_unicode(16#20AF) -> 16#A5;
from_unicode(16#037A) -> 16#AA;
from_unicode(16#2015) -> 16#AF;
from_unicode(16#0384) -> 16#B4;
from_unicode(16#0385) -> 16#B5;
from_unicode(16#0386) -> 16#B6;
from_unicode(16#0388) -> 16#B8;
from_unicode(16#0389) -> 16#B9;
from_unicode(16#038A) -> 16#BA;
from_unicode(16#038C) -> 16#BC;
from_unicode(16#038E) -> 16#BE;
from_unicode(16#038F) -> 16#BF;
from_unicode(16#0390) -> 16#C0;
from_unicode(16#0391) -> 16#C1;
from_unicode(16#0392) -> 16#C2;
from_unicode(16#0393) -> 16#C3;
from_unicode(16#0394) -> 16#C4;
from_unicode(16#0395) -> 16#C5;
from_unicode(16#0396) -> 16#C6;
from_unicode(16#0397) -> 16#C7;
from_unicode(16#0398) -> 16#C8;
from_unicode(16#0399) -> 16#C9;
from_unicode(16#039A) -> 16#CA;
from_unicode(16#039B) -> 16#CB;
from_unicode(16#039C) -> 16#CC;
from_unicode(16#039D) -> 16#CD;
from_unicode(16#039E) -> 16#CE;
from_unicode(16#039F) -> 16#CF;
from_unicode(16#03A0) -> 16#D0;
from_unicode(16#03A1) -> 16#D1;
from_unicode(16#03A3) -> 16#D3;
from_unicode(16#03A4) -> 16#D4;
from_unicode(16#03A5) -> 16#D5;
from_unicode(16#03A6) -> 16#D6;
from_unicode(16#03A7) -> 16#D7;
from_unicode(16#03A8) -> 16#D8;
from_unicode(16#03A9) -> 16#D9;
from_unicode(16#03AA) -> 16#DA;
from_unicode(16#03AB) -> 16#DB;
from_unicode(16#03AC) -> 16#DC;
from_unicode(16#03AD) -> 16#DD;
from_unicode(16#03AE) -> 16#DE;
from_unicode(16#03AF) -> 16#DF;
from_unicode(16#03B0) -> 16#E0;
from_unicode(16#03B1) -> 16#E1;
from_unicode(16#03B2) -> 16#E2;
from_unicode(16#03B3) -> 16#E3;
from_unicode(16#03B4) -> 16#E4;
from_unicode(16#03B5) -> 16#E5;
from_unicode(16#03B6) -> 16#E6;
from_unicode(16#03B7) -> 16#E7;
from_unicode(16#03B8) -> 16#E8;
from_unicode(16#03B9) -> 16#E9;
from_unicode(16#03BA) -> 16#EA;
from_unicode(16#03BB) -> 16#EB;
from_unicode(16#03BC) -> 16#EC;
from_unicode(16#03BD) -> 16#ED;
from_unicode(16#03BE) -> 16#EE;
from_unicode(16#03BF) -> 16#EF;
from_unicode(16#03C0) -> 16#F0;
from_unicode(16#03C1) -> 16#F1;
from_unicode(16#03C2) -> 16#F2;
from_unicode(16#03C3) -> 16#F3;
from_unicode(16#03C4) -> 16#F4;
from_unicode(16#03C5) -> 16#F5;
from_unicode(16#03C6) -> 16#F6;
from_unicode(16#03C7) -> 16#F7;
from_unicode(16#03C8) -> 16#F8;
from_unicode(16#03C9) -> 16#F9;
from_unicode(16#03CA) -> 16#FA;
from_unicode(16#03CB) -> 16#FB;
from_unicode(16#03CC) -> 16#FC;
from_unicode(16#03CD) -> 16#FD;
from_unicode(16#03CE) -> 16#FE;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
