%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/MISC/ATARIST.TXT AT 2016-08-19
-module(atarist).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#80) -> 16#00C7;
to_unicode(16#81) -> 16#00FC;
to_unicode(16#82) -> 16#00E9;
to_unicode(16#83) -> 16#00E2;
to_unicode(16#84) -> 16#00E4;
to_unicode(16#85) -> 16#00E0;
to_unicode(16#86) -> 16#00E5;
to_unicode(16#87) -> 16#00E7;
to_unicode(16#88) -> 16#00EA;
to_unicode(16#89) -> 16#00EB;
to_unicode(16#8A) -> 16#00E8;
to_unicode(16#8B) -> 16#00EF;
to_unicode(16#8C) -> 16#00EE;
to_unicode(16#8D) -> 16#00EC;
to_unicode(16#8E) -> 16#00C4;
to_unicode(16#8F) -> 16#00C5;
to_unicode(16#90) -> 16#00C9;
to_unicode(16#91) -> 16#00E6;
to_unicode(16#92) -> 16#00C6;
to_unicode(16#93) -> 16#00F4;
to_unicode(16#94) -> 16#00F6;
to_unicode(16#95) -> 16#00F2;
to_unicode(16#96) -> 16#00FB;
to_unicode(16#97) -> 16#00F9;
to_unicode(16#98) -> 16#00FF;
to_unicode(16#99) -> 16#00D6;
to_unicode(16#9A) -> 16#00DC;
to_unicode(16#9B) -> 16#00A2;
to_unicode(16#9C) -> 16#00A3;
to_unicode(16#9D) -> 16#00A5;
to_unicode(16#9E) -> 16#00DF;
to_unicode(16#9F) -> 16#0192;
to_unicode(16#A0) -> 16#00E1;
to_unicode(16#A1) -> 16#00ED;
to_unicode(16#A2) -> 16#00F3;
to_unicode(16#A3) -> 16#00FA;
to_unicode(16#A4) -> 16#00F1;
to_unicode(16#A5) -> 16#00D1;
to_unicode(16#A6) -> 16#00AA;
to_unicode(16#A7) -> 16#00BA;
to_unicode(16#A8) -> 16#00BF;
to_unicode(16#A9) -> 16#2310;
to_unicode(16#AA) -> 16#00AC;
to_unicode(16#AB) -> 16#00BD;
to_unicode(16#AC) -> 16#00BC;
to_unicode(16#AD) -> 16#00A1;
to_unicode(16#AE) -> 16#00AB;
to_unicode(16#AF) -> 16#00BB;
to_unicode(16#B0) -> 16#00E3;
to_unicode(16#B1) -> 16#00F5;
to_unicode(16#B2) -> 16#00D8;
to_unicode(16#B3) -> 16#00F8;
to_unicode(16#B4) -> 16#0153;
to_unicode(16#B5) -> 16#0152;
to_unicode(16#B6) -> 16#00C0;
to_unicode(16#B7) -> 16#00C3;
to_unicode(16#B8) -> 16#00D5;
to_unicode(16#B9) -> 16#00A8;
to_unicode(16#BA) -> 16#00B4;
to_unicode(16#BB) -> 16#2020;
to_unicode(16#BC) -> 16#00B6;
to_unicode(16#BD) -> 16#00A9;
to_unicode(16#BE) -> 16#00AE;
to_unicode(16#BF) -> 16#2122;
to_unicode(16#C0) -> 16#0133;
to_unicode(16#C1) -> 16#0132;
to_unicode(16#C2) -> 16#05D0;
to_unicode(16#C3) -> 16#05D1;
to_unicode(16#C4) -> 16#05D2;
to_unicode(16#C5) -> 16#05D3;
to_unicode(16#C6) -> 16#05D4;
to_unicode(16#C7) -> 16#05D5;
to_unicode(16#C8) -> 16#05D6;
to_unicode(16#C9) -> 16#05D7;
to_unicode(16#CA) -> 16#05D8;
to_unicode(16#CB) -> 16#05D9;
to_unicode(16#CC) -> 16#05DB;
to_unicode(16#CD) -> 16#05DC;
to_unicode(16#CE) -> 16#05DE;
to_unicode(16#CF) -> 16#05E0;
to_unicode(16#D0) -> 16#05E1;
to_unicode(16#D1) -> 16#05E2;
to_unicode(16#D2) -> 16#05E4;
to_unicode(16#D3) -> 16#05E6;
to_unicode(16#D4) -> 16#05E7;
to_unicode(16#D5) -> 16#05E8;
to_unicode(16#D6) -> 16#05E9;
to_unicode(16#D7) -> 16#05EA;
to_unicode(16#D8) -> 16#05DF;
to_unicode(16#D9) -> 16#05DA;
to_unicode(16#DA) -> 16#05DD;
to_unicode(16#DB) -> 16#05E3;
to_unicode(16#DC) -> 16#05E5;
to_unicode(16#DD) -> 16#00A7;
to_unicode(16#DE) -> 16#2227;
to_unicode(16#DF) -> 16#221E;
to_unicode(16#E0) -> 16#03B1;
to_unicode(16#E1) -> 16#03B2;
to_unicode(16#E2) -> 16#0393;
to_unicode(16#E3) -> 16#03C0;
to_unicode(16#E4) -> 16#03A3;
to_unicode(16#E5) -> 16#03C3;
to_unicode(16#E6) -> 16#00B5;
to_unicode(16#E7) -> 16#03C4;
to_unicode(16#E8) -> 16#03A6;
to_unicode(16#E9) -> 16#0398;
to_unicode(16#EA) -> 16#03A9;
to_unicode(16#EB) -> 16#03B4;
to_unicode(16#EC) -> 16#222E;
to_unicode(16#ED) -> 16#03C6;
to_unicode(16#EE) -> 16#2208;
to_unicode(16#EF) -> 16#2229;
to_unicode(16#F0) -> 16#2261;
to_unicode(16#F1) -> 16#00B1;
to_unicode(16#F2) -> 16#2265;
to_unicode(16#F3) -> 16#2264;
to_unicode(16#F4) -> 16#2320;
to_unicode(16#F5) -> 16#2321;
to_unicode(16#F6) -> 16#00F7;
to_unicode(16#F7) -> 16#2248;
to_unicode(16#F8) -> 16#00B0;
to_unicode(16#F9) -> 16#2219;
to_unicode(16#FA) -> 16#00B7;
to_unicode(16#FB) -> 16#221A;
to_unicode(16#FC) -> 16#207F;
to_unicode(16#FD) -> 16#00B2;
to_unicode(16#FE) -> 16#00B3;
to_unicode(16#FF) -> 16#00AF;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#00C7) -> 16#80;
from_unicode(16#00FC) -> 16#81;
from_unicode(16#00E9) -> 16#82;
from_unicode(16#00E2) -> 16#83;
from_unicode(16#00E4) -> 16#84;
from_unicode(16#00E0) -> 16#85;
from_unicode(16#00E5) -> 16#86;
from_unicode(16#00E7) -> 16#87;
from_unicode(16#00EA) -> 16#88;
from_unicode(16#00EB) -> 16#89;
from_unicode(16#00E8) -> 16#8A;
from_unicode(16#00EF) -> 16#8B;
from_unicode(16#00EE) -> 16#8C;
from_unicode(16#00EC) -> 16#8D;
from_unicode(16#00C4) -> 16#8E;
from_unicode(16#00C5) -> 16#8F;
from_unicode(16#00C9) -> 16#90;
from_unicode(16#00E6) -> 16#91;
from_unicode(16#00C6) -> 16#92;
from_unicode(16#00F4) -> 16#93;
from_unicode(16#00F6) -> 16#94;
from_unicode(16#00F2) -> 16#95;
from_unicode(16#00FB) -> 16#96;
from_unicode(16#00F9) -> 16#97;
from_unicode(16#00FF) -> 16#98;
from_unicode(16#00D6) -> 16#99;
from_unicode(16#00DC) -> 16#9A;
from_unicode(16#00A2) -> 16#9B;
from_unicode(16#00A3) -> 16#9C;
from_unicode(16#00A5) -> 16#9D;
from_unicode(16#00DF) -> 16#9E;
from_unicode(16#0192) -> 16#9F;
from_unicode(16#00E1) -> 16#A0;
from_unicode(16#00ED) -> 16#A1;
from_unicode(16#00F3) -> 16#A2;
from_unicode(16#00FA) -> 16#A3;
from_unicode(16#00F1) -> 16#A4;
from_unicode(16#00D1) -> 16#A5;
from_unicode(16#00AA) -> 16#A6;
from_unicode(16#00BA) -> 16#A7;
from_unicode(16#00BF) -> 16#A8;
from_unicode(16#2310) -> 16#A9;
from_unicode(16#00AC) -> 16#AA;
from_unicode(16#00BD) -> 16#AB;
from_unicode(16#00BC) -> 16#AC;
from_unicode(16#00A1) -> 16#AD;
from_unicode(16#00AB) -> 16#AE;
from_unicode(16#00BB) -> 16#AF;
from_unicode(16#00E3) -> 16#B0;
from_unicode(16#00F5) -> 16#B1;
from_unicode(16#00D8) -> 16#B2;
from_unicode(16#00F8) -> 16#B3;
from_unicode(16#0153) -> 16#B4;
from_unicode(16#0152) -> 16#B5;
from_unicode(16#00C0) -> 16#B6;
from_unicode(16#00C3) -> 16#B7;
from_unicode(16#00D5) -> 16#B8;
from_unicode(16#00A8) -> 16#B9;
from_unicode(16#00B4) -> 16#BA;
from_unicode(16#2020) -> 16#BB;
from_unicode(16#00B6) -> 16#BC;
from_unicode(16#00A9) -> 16#BD;
from_unicode(16#00AE) -> 16#BE;
from_unicode(16#2122) -> 16#BF;
from_unicode(16#0133) -> 16#C0;
from_unicode(16#0132) -> 16#C1;
from_unicode(16#05D0) -> 16#C2;
from_unicode(16#05D1) -> 16#C3;
from_unicode(16#05D2) -> 16#C4;
from_unicode(16#05D3) -> 16#C5;
from_unicode(16#05D4) -> 16#C6;
from_unicode(16#05D5) -> 16#C7;
from_unicode(16#05D6) -> 16#C8;
from_unicode(16#05D7) -> 16#C9;
from_unicode(16#05D8) -> 16#CA;
from_unicode(16#05D9) -> 16#CB;
from_unicode(16#05DB) -> 16#CC;
from_unicode(16#05DC) -> 16#CD;
from_unicode(16#05DE) -> 16#CE;
from_unicode(16#05E0) -> 16#CF;
from_unicode(16#05E1) -> 16#D0;
from_unicode(16#05E2) -> 16#D1;
from_unicode(16#05E4) -> 16#D2;
from_unicode(16#05E6) -> 16#D3;
from_unicode(16#05E7) -> 16#D4;
from_unicode(16#05E8) -> 16#D5;
from_unicode(16#05E9) -> 16#D6;
from_unicode(16#05EA) -> 16#D7;
from_unicode(16#05DF) -> 16#D8;
from_unicode(16#05DA) -> 16#D9;
from_unicode(16#05DD) -> 16#DA;
from_unicode(16#05E3) -> 16#DB;
from_unicode(16#05E5) -> 16#DC;
from_unicode(16#00A7) -> 16#DD;
from_unicode(16#2227) -> 16#DE;
from_unicode(16#221E) -> 16#DF;
from_unicode(16#03B1) -> 16#E0;
from_unicode(16#03B2) -> 16#E1;
from_unicode(16#0393) -> 16#E2;
from_unicode(16#03C0) -> 16#E3;
from_unicode(16#03A3) -> 16#E4;
from_unicode(16#03C3) -> 16#E5;
from_unicode(16#00B5) -> 16#E6;
from_unicode(16#03C4) -> 16#E7;
from_unicode(16#03A6) -> 16#E8;
from_unicode(16#0398) -> 16#E9;
from_unicode(16#03A9) -> 16#EA;
from_unicode(16#03B4) -> 16#EB;
from_unicode(16#222E) -> 16#EC;
from_unicode(16#03C6) -> 16#ED;
from_unicode(16#2208) -> 16#EE;
from_unicode(16#2229) -> 16#EF;
from_unicode(16#2261) -> 16#F0;
from_unicode(16#00B1) -> 16#F1;
from_unicode(16#2265) -> 16#F2;
from_unicode(16#2264) -> 16#F3;
from_unicode(16#2320) -> 16#F4;
from_unicode(16#2321) -> 16#F5;
from_unicode(16#00F7) -> 16#F6;
from_unicode(16#2248) -> 16#F7;
from_unicode(16#00B0) -> 16#F8;
from_unicode(16#2219) -> 16#F9;
from_unicode(16#00B7) -> 16#FA;
from_unicode(16#221A) -> 16#FB;
from_unicode(16#207F) -> 16#FC;
from_unicode(16#00B2) -> 16#FD;
from_unicode(16#00B3) -> 16#FE;
from_unicode(16#00AF) -> 16#FF;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
