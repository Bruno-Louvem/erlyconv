%% THIS FILE WAS AUTOMATICALLY GENERATED BY gen_src.pl
%% FROM mappings/ISO8859/8859-3.TXT AT 2016-08-19
-module(iso8859_3).
-vsn(20160819).
-export([to_unicode/1, from_unicode/1]).

%% Public functions
to_unicode(16#A1) -> 16#0126;
to_unicode(16#A2) -> 16#02D8;
to_unicode(16#A6) -> 16#0124;
to_unicode(16#A9) -> 16#0130;
to_unicode(16#AA) -> 16#015E;
to_unicode(16#AB) -> 16#011E;
to_unicode(16#AC) -> 16#0134;
to_unicode(16#AF) -> 16#017B;
to_unicode(16#B1) -> 16#0127;
to_unicode(16#B6) -> 16#0125;
to_unicode(16#B9) -> 16#0131;
to_unicode(16#BA) -> 16#015F;
to_unicode(16#BB) -> 16#011F;
to_unicode(16#BC) -> 16#0135;
to_unicode(16#BF) -> 16#017C;
to_unicode(16#C5) -> 16#010A;
to_unicode(16#C6) -> 16#0108;
to_unicode(16#D5) -> 16#0120;
to_unicode(16#D8) -> 16#011C;
to_unicode(16#DD) -> 16#016C;
to_unicode(16#DE) -> 16#015C;
to_unicode(16#E5) -> 16#010B;
to_unicode(16#E6) -> 16#0109;
to_unicode(16#F5) -> 16#0121;
to_unicode(16#F8) -> 16#011D;
to_unicode(16#FD) -> 16#016D;
to_unicode(16#FE) -> 16#015D;
to_unicode(16#FF) -> 16#02D9;
to_unicode(List) when is_list(List) -> [to_unicode(C) || C <- List];
to_unicode(Bin) when is_binary(Bin) -> bin_to_unicode(Bin, <<>>);
to_unicode(Other) -> Other.

from_unicode(16#0126) -> 16#A1;
from_unicode(16#02D8) -> 16#A2;
from_unicode(16#0124) -> 16#A6;
from_unicode(16#0130) -> 16#A9;
from_unicode(16#015E) -> 16#AA;
from_unicode(16#011E) -> 16#AB;
from_unicode(16#0134) -> 16#AC;
from_unicode(16#017B) -> 16#AF;
from_unicode(16#0127) -> 16#B1;
from_unicode(16#0125) -> 16#B6;
from_unicode(16#0131) -> 16#B9;
from_unicode(16#015F) -> 16#BA;
from_unicode(16#011F) -> 16#BB;
from_unicode(16#0135) -> 16#BC;
from_unicode(16#017C) -> 16#BF;
from_unicode(16#010A) -> 16#C5;
from_unicode(16#0108) -> 16#C6;
from_unicode(16#0120) -> 16#D5;
from_unicode(16#011C) -> 16#D8;
from_unicode(16#016C) -> 16#DD;
from_unicode(16#015C) -> 16#DE;
from_unicode(16#010B) -> 16#E5;
from_unicode(16#0109) -> 16#E6;
from_unicode(16#0121) -> 16#F5;
from_unicode(16#011D) -> 16#F8;
from_unicode(16#016D) -> 16#FD;
from_unicode(16#015D) -> 16#FE;
from_unicode(16#02D9) -> 16#FF;
from_unicode(List) when is_list(List) -> [from_unicode(C) || C <- List];
from_unicode(Bin) when is_binary(Bin) -> bin_from_unicode(Bin, <<>>);
from_unicode(Other) -> Other.

%% Private functions
bin_to_unicode(<<>>, Bin) -> Bin;
bin_to_unicode(<<C, Rest/binary>>, Acc) ->
    U = to_unicode(C),
    bin_to_unicode(Rest, <<Acc/binary, U/utf8>>).

bin_from_unicode(<<>>, Bin) -> Bin;
bin_from_unicode(<<U/utf8, Rest/binary>>, Acc) ->
    C = from_unicode(U),
    bin_from_unicode(Rest, <<Acc/binary, C>>).
